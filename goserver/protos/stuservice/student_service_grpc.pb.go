// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: student_service.proto

package stuservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Stuservice_AddStudent_FullMethodName  = "/stuservice.stuservice/addStudent"
	Stuservice_QueryByID_FullMethodName   = "/stuservice.stuservice/queryByID"
	Stuservice_QueryByName_FullMethodName = "/stuservice.stuservice/queryByName"
	Stuservice_DeleteByID_FullMethodName  = "/stuservice.stuservice/deleteByID"
)

// StuserviceClient is the client API for Stuservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StuserviceClient interface {
	// bool add(Student stu)
	AddStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Student queryByID(int stuID)
	QueryByID(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*Student, error)
	// Students queryByName(String name)
	QueryByName(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (Stuservice_QueryByNameClient, error)
	// bool deleteByID(int stuID)
	DeleteByID(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type stuserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewStuserviceClient(cc grpc.ClientConnInterface) StuserviceClient {
	return &stuserviceClient{cc}
}

func (c *stuserviceClient) AddStudent(ctx context.Context, in *Student, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, Stuservice_AddStudent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuserviceClient) QueryByID(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, Stuservice_QueryByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuserviceClient) QueryByName(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (Stuservice_QueryByNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stuservice_ServiceDesc.Streams[0], Stuservice_QueryByName_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stuserviceQueryByNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stuservice_QueryByNameClient interface {
	Recv() (*Student, error)
	grpc.ClientStream
}

type stuserviceQueryByNameClient struct {
	grpc.ClientStream
}

func (x *stuserviceQueryByNameClient) Recv() (*Student, error) {
	m := new(Student)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stuserviceClient) DeleteByID(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, Stuservice_DeleteByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StuserviceServer is the server API for Stuservice service.
// All implementations must embed UnimplementedStuserviceServer
// for forward compatibility
type StuserviceServer interface {
	// bool add(Student stu)
	AddStudent(context.Context, *Student) (*wrapperspb.BoolValue, error)
	// Student queryByID(int stuID)
	QueryByID(context.Context, *wrapperspb.Int64Value) (*Student, error)
	// Students queryByName(String name)
	QueryByName(*wrapperspb.StringValue, Stuservice_QueryByNameServer) error
	// bool deleteByID(int stuID)
	DeleteByID(context.Context, *wrapperspb.Int64Value) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedStuserviceServer()
}

// UnimplementedStuserviceServer must be embedded to have forward compatible implementations.
type UnimplementedStuserviceServer struct {
}

func (UnimplementedStuserviceServer) AddStudent(context.Context, *Student) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedStuserviceServer) QueryByID(context.Context, *wrapperspb.Int64Value) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryByID not implemented")
}
func (UnimplementedStuserviceServer) QueryByName(*wrapperspb.StringValue, Stuservice_QueryByNameServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryByName not implemented")
}
func (UnimplementedStuserviceServer) DeleteByID(context.Context, *wrapperspb.Int64Value) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedStuserviceServer) mustEmbedUnimplementedStuserviceServer() {}

// UnsafeStuserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StuserviceServer will
// result in compilation errors.
type UnsafeStuserviceServer interface {
	mustEmbedUnimplementedStuserviceServer()
}

func RegisterStuserviceServer(s grpc.ServiceRegistrar, srv StuserviceServer) {
	s.RegisterService(&Stuservice_ServiceDesc, srv)
}

func _Stuservice_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Student)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuserviceServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stuservice_AddStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuserviceServer).AddStudent(ctx, req.(*Student))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stuservice_QueryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuserviceServer).QueryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stuservice_QueryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuserviceServer).QueryByID(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stuservice_QueryByName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StuserviceServer).QueryByName(m, &stuserviceQueryByNameServer{stream})
}

type Stuservice_QueryByNameServer interface {
	Send(*Student) error
	grpc.ServerStream
}

type stuserviceQueryByNameServer struct {
	grpc.ServerStream
}

func (x *stuserviceQueryByNameServer) Send(m *Student) error {
	return x.ServerStream.SendMsg(m)
}

func _Stuservice_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuserviceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stuservice_DeleteByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuserviceServer).DeleteByID(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

// Stuservice_ServiceDesc is the grpc.ServiceDesc for Stuservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stuservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stuservice.stuservice",
	HandlerType: (*StuserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addStudent",
			Handler:    _Stuservice_AddStudent_Handler,
		},
		{
			MethodName: "queryByID",
			Handler:    _Stuservice_QueryByID_Handler,
		},
		{
			MethodName: "deleteByID",
			Handler:    _Stuservice_DeleteByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "queryByName",
			Handler:       _Stuservice_QueryByName_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "student_service.proto",
}
